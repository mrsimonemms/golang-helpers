/*
 * Copyright 2023 Simon Emms <simon@simonemms.com>
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             (unknown)
// source: providers/v1/providers.proto

package basic

import (
	context "context"

	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	BasicService_Command1_FullMethodName = "/basic.v1.BasicService/Command1"
	BasicService_Command2_FullMethodName = "/basic.v1.BasicService/Command2"
)

// BasicServiceClient is the client API for BasicService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// The basic service definition.
type BasicServiceClient interface {
	// Builds the cluster
	Command1(ctx context.Context, in *Command1Request, opts ...grpc.CallOption) (*Command1Response, error)
	Command2(ctx context.Context, in *Command2Request, opts ...grpc.CallOption) (*Command2Response, error)
}

type basicServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewBasicServiceClient(cc grpc.ClientConnInterface) BasicServiceClient {
	return &basicServiceClient{cc}
}

func (c *basicServiceClient) Command1(ctx context.Context, in *Command1Request, opts ...grpc.CallOption) (*Command1Response, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Command1Response)
	err := c.cc.Invoke(ctx, BasicService_Command1_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *basicServiceClient) Command2(ctx context.Context, in *Command2Request, opts ...grpc.CallOption) (*Command2Response, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Command2Response)
	err := c.cc.Invoke(ctx, BasicService_Command2_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// BasicServiceServer is the server API for BasicService service.
// All implementations must embed UnimplementedBasicServiceServer
// for forward compatibility.
//
// The basic service definition.
type BasicServiceServer interface {
	// Builds the cluster
	Command1(context.Context, *Command1Request) (*Command1Response, error)
	Command2(context.Context, *Command2Request) (*Command2Response, error)
	mustEmbedUnimplementedBasicServiceServer()
}

// UnimplementedBasicServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedBasicServiceServer struct{}

func (UnimplementedBasicServiceServer) Command1(context.Context, *Command1Request) (*Command1Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Command1 not implemented")
}

func (UnimplementedBasicServiceServer) Command2(context.Context, *Command2Request) (*Command2Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Command2 not implemented")
}
func (UnimplementedBasicServiceServer) mustEmbedUnimplementedBasicServiceServer() {}
func (UnimplementedBasicServiceServer) testEmbeddedByValue()                      {}

// UnsafeBasicServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to BasicServiceServer will
// result in compilation errors.
type UnsafeBasicServiceServer interface {
	mustEmbedUnimplementedBasicServiceServer()
}

func RegisterBasicServiceServer(s grpc.ServiceRegistrar, srv BasicServiceServer) {
	// If the following call pancis, it indicates UnimplementedBasicServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&BasicService_ServiceDesc, srv)
}

func _BasicService_Command1_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Command1Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BasicServiceServer).Command1(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BasicService_Command1_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BasicServiceServer).Command1(ctx, req.(*Command1Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _BasicService_Command2_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Command2Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BasicServiceServer).Command2(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BasicService_Command2_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BasicServiceServer).Command2(ctx, req.(*Command2Request))
	}
	return interceptor(ctx, in, info, handler)
}

// BasicService_ServiceDesc is the grpc.ServiceDesc for BasicService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var BasicService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "basic.v1.BasicService",
	HandlerType: (*BasicServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Command1",
			Handler:    _BasicService_Command1_Handler,
		},
		{
			MethodName: "Command2",
			Handler:    _BasicService_Command2_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "providers/v1/providers.proto",
}
